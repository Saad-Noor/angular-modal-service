!function(e){var n={};function o(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)o.d(t,l,function(n){return e[n]}.bind(null,l));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";angular.module("angularModalService",[]).provider("ModalService",function(){var e={closeDelay:0};this.configureOptions=function(n){angular.extend(e,n)},this.$get=["$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout",function(n,o,t,l,r,c,a,i,s){return new function(e){var r=this;r.configOptions=e,r.openModals=[],r.closeModals=function(e,n){for(n=n||r.configOptions.closeDelay;r.openModals.length;)r.openModals[0].close(e,n),r.openModals.splice(0,1)};var u=function(e){e.controller=function(e){var n=Object.keys(e.bindings||{});return[].concat(["$scope","close"],n,function(){var e=arguments[0];e.close=arguments[1],arguments.slice(2).forEach(function(o,t){e[n[t]]=o})})}(e),e.template=function(e){var n=function(e){return e.replace(/([a-z0-9])([A-Z])/g,function(e,n,o){return[n,o].join("-").toLowerCase()})},o=n(e.component),t="<"+o+' name="component" close="close"',l=Object.keys(e.bindings||{});return l.length>0&&(t+=" "+l.map(function(e){return n(e)+'="'+e+'"'}).join(" ")),t+="></"+o+">"}(e)};r.showModal=function(e){e.component&&u(e);var p=angular.element(o[0].body),f=a.defer();return e.controller?(function(e,n){var o=a.defer();return e?o.resolve(e):n?i(n,!0).then(function(e){o.resolve(e)},function(e){o.reject(e)}):o.reject("No template or templateUrl has been specified."),o.promise}(e.template,e.templateUrl).then(function(i){var u={},d=(e.scope||c).$new(),m=null,g=e.locationChangeSuccess;!1===g?m=angular.noop:angular.isNumber(g)&&g>=0?s(function(){m=c.$on("$locationChangeSuccess",h.close)},g):s(function(){m=c.$on("$locationChangeSuccess",h.close)},r.configOptions.closeDelay);var v=a.defer(),b=a.defer(),y=!1,h={$scope:d,close:function(o,t){y||(y=!0,t=t||r.configOptions.closeDelay,"function"==typeof e.preClose&&e.preClose(u,o,t),void 0!==t&&null!==t||(t=0),s(function(){!function(o){v.resolve(o),e.bodyClass&&p[0].classList.remove(e.bodyClass),n.leave($).then(function(){if($){b.resolve(o),d.$destroy();for(var e=0;e<r.openModals.length;e++)if(r.openModals[e].modal===u){r.openModals.splice(e,1);break}h.close=null,f=null,v=null,u=null,h=null,$=null,d=null}}),m&&m()}(o)},t))}};e.inputs&&angular.extend(h,e.inputs);var $=t(i)(d);h.$element=$;var M=d[e.controllerAs],j=l(e.controller,h,!1,e.controllerAs);e.controllerAs&&M&&angular.extend(j,M);var O=p;angular.isString(e.appendElement)?O=angular.element(o[0].querySelector(e.appendElement)):e.appendElement&&(O=e.appendElement),function(e,o){var t=e.children();t.length>0?n.enter(o,e,t[t.length-1]):n.enter(o,e)}(O,$),e.bodyClass&&p[0].classList.add(e.bodyClass),u.controller=j,u.scope=d,u.element=$,u.close=v.promise,u.closed=b.promise,angular.isFunction(u.controller.$onInit)&&u.controller.$onInit(),f.resolve(u),document.activeElement.blur(),r.openModals.push({modal:u,close:h.close})}).then(null,function(e){f.reject(e)}),f.promise):(f.reject("No controller has been specified."),f.promise)}}(e)}]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,